#!/usr/bin/env ruby

# Convert tab-delimited file to VCF file
# 
# Example usage:
#   ./tab2vcf.rb variants.txt > variants.vcf

# Include dependencies
SCRIPT_ROOT = File.expand_path(File.dirname(__FILE__))
require File.join(SCRIPT_ROOT, '.includes', 'lib', 'trollop.rb')

opts = Trollop::options do
  opt :chr, "Column number with chromosome number/letter", :short => 'c', :default => 1
  opt :pos, "Column number with starting position", :short => 'p', :default => 2
  opt :ref, "Column number with reference allele", :short => 'r', :default => 3
  opt :alt, "Column number with alternate allele", :short => 'a', :default => 4
  opt :id, "Column number with rsID", :short => 'i', :type => :int, :default => nil
  opt :qual, "Column number with quality specification", :short => 'q', :type => :int, :default => nil
  opt :filter, "Column number with filter specification", :short => 'f', :type => :int, :default => nil
  opt :source, "Data source", :short => 's', :default => '.'
  opt :snp_build, "dbSNP build ID (e.g. 142)", :short => 'S', :default => '.'
  opt :reference, "Genome build (e.g. GRCh37.p13, GRCh38, hg19, hg38)", :short => 'R', :type => :string, :default => '.'
  opt :prefix, "Prefix for all INFO tags in the output VCF", :short => 'P', :type => :string
  opt :info_tag_map, "File with input column names mapped to their respective meta-info descriptions and (optionally) preferred INFO tag names\nFormat: original_name\\tdescription\\tINFO_tag_name\\n", :short => 'I', :type => :string
  opt :empty_values, "Input values that should be mapped to a single period (i.e. empty) in the output VCF", :short => 'e', :default => 'NA,N/A,NULL,null,nil,\N'
end

# Exit if no input file specified
if ARGV.empty?
  STDERR.puts "Error: Must specify input file"
  Trollop::educate
end

# Options
NUM_CHR = opts[:chr] - 1
NUM_POS = opts[:pos] - 1
NUM_REF = opts[:ref] - 1
NUM_ALT = opts[:alt] - 1
if opts[:id].nil?
  NUM_ID = nil
else
  NUM_ID = opts[:id] - 1
end
if opts[:qual].nil?
  NUM_QUAL = nil
else
  NUM_QUAL = opts[:qual] - 1
end
if opts[:filter].nil?
  NUM_FILTER = nil
else
  NUM_FILTER = opts[:filter] - 1
end
if opts[:prefix].nil?
  INFO_PREFIX = ''
elsif opts[:prefix].match(/[,=;\s]/)
  abort "Error: No white-space, commas, semi-colons, or equals-signs allowed for --prefix"
else
  INFO_PREFIX = opts[:prefix]
end
if opts[:info_tag_map].nil?
  INFO_TAG_MAP = nil
else
  if !File.exist?(opts[:info_tag_map])
    abort "Error: File #{opts[:info_tag_map]} does not exist for --info-tag-map option"
  else
    info_tag_map = {}
    File.open(opts[:info_tag_map]).each_line do |line|
      col,description,new_name = line.chomp.split("\t")
      if description.to_s.empty?
        description = 'NA'
      end
      if new_name.to_s.empty?
        new_name = nil
      end
      info_tag_map[col] = {}
      info_tag_map[col][:description] = description
      info_tag_map[col][:new_name] = new_name
    end
    INFO_TAG_MAP = info_tag_map
  end
end
EMPTY_VALUES = opts[:empty_values].split(',').push("")

# Input file
F_IN = ARGV[0]

# Illegal INFO field characters mapped to their legal values
ILLEGAL_INFO_CHARS = {
  ', ' => '_AND_',
  ','  => '_AND_',
  '; ' => '|',
  ';'  => '|',
  ' '  => '_',
  '='  => '->',
}

header = ""
info_tags = []
row_num = 0
File.open(F_IN).each_line do |row|
  row_num += 1
  row.strip!
  fields = row.split("\t")

  # Print header and INFO tags
  if row_num == 1
    TIME = Time.now.strftime("%Y%m%d")
    header = "##fileformat=VCFv4.2\n" +
             "##fileDate=#{TIME}\n" +
             "##source=#{opts[:source]}\n" +
             "##dbSNP_BUILD_ID=#{opts[:snp_build]}\n" +
             "##reference=#{opts[:reference]}\n"
    fields.each_with_index do |f, i|
      # Update INFO field description
      if INFO_TAG_MAP[fields[i]].nil?
        description = "NA"
      else
        description = INFO_TAG_MAP[fields[i]][:description].gsub('"', "'")
      end
      # Update INFO field name
      if info_tag_map[fields[i]][:new_name].nil?
        fields[i] = fields[i].strip.gsub(/[,=; ]+/, '_').upcase.sub(/^/, INFO_PREFIX)
      else
        fields[i] = INFO_TAG_MAP[fields[i]][:new_name].strip.gsub(/[,=; ]+/, '_').sub(/^/, INFO_PREFIX)
      end
      info_tags << fields[i]
      next if i == NUM_CHR
      next if i == NUM_POS
      next if i == NUM_REF
      next if i == NUM_ALT
      next if i == NUM_ID
      next if i == NUM_QUAL
      next if i == NUM_FILTER
      header += "##INFO=<ID=#{fields[i]},Number=.,Type=String,Description=\"#{description}\">\n"
    end
    header += ['#CHROM', 'POS', 'ID', 'REF', 'ALT', 'QUAL', 'FILTER', 'INFO'].join("\t")
    header += "\n"
    puts header
    next
  end

  output = []

  # Format all values and create INFO column
  # - Replace all spaces, commas, equal-signs, and semi-colons with legal characters
  # - Prepend the correct INFO tag to each value (e.g. TAG=value)
  output[7] = []
  fields.each_with_index do |f, i|
    fields[i] = fields[i].strip.gsub(/[,;= ][ ]?/, ILLEGAL_INFO_CHARS)
    fields[i] = '.' if EMPTY_VALUES.include?(fields[i])
    next if i == NUM_CHR
    next if i == NUM_POS
    next if i == NUM_REF
    next if i == NUM_ALT
    next if i == NUM_ID
    next if i == NUM_QUAL
    next if i == NUM_FILTER
    output[7] << "#{info_tags[i]}=#{fields[i]}"
  end
  output[7] = output[7].join(';')

  # Define all other columns (non-INFO)
  output[0] = fields[NUM_CHR] # CHROM
  output[1] = fields[NUM_POS] # POS
  if NUM_ID.nil? # ID
    output[2] = '.'
  else
    output[2] = fields[NUM_ID]
  end
  output[3] = fields[NUM_REF] # REF
  output[4] = fields[NUM_ALT] # ALT
  if NUM_QUAL.nil? # QUAL
    output[5] = '.'
  else
    output[5] = fields[NUM_QUAL]
  end
  if NUM_FILTER.nil? # FILTER
    output[6] = '.'
  else
    output[6] = fields[NUM_FILTER]
  end

  puts output.join("\t")
end
